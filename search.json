[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Rendered notebooks for AISG 2025 Assignment 1 :)"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/processing/data.html",
    "href": "posts/processing/data.html",
    "title": "Dataset Preprocessing",
    "section": "",
    "text": "import os\nimport shutil\nimport matplotlib.pyplot as plt\nimport random\nimport pandas as pd\nfrom collections import Counter\nimport cv2\n\n%matplotlib inline\n%config InlineBackend.figure_format = 'retina'\n\n\nimages_dir = \"./data/images\"\nlabels_dir = \"./data/labels\"\n\n\nimages_base = set([f.split('.')[0] for f in os.listdir(images_dir)])\nlabels_base = set([f.split('.')[0] for f in os.listdir(labels_dir)])\n\nintersection = images_base.intersection(labels_base)\nuncommon_files = images_base.symmetric_difference(labels_base)\n\nimages = [f for f in os.listdir(images_dir) if f.split('.')[0] in intersection]\nlabels = [f for f in os.listdir(labels_dir) if f.split('.')[0] in intersection]\n\nimages_ = [f.split('.')[0] for f in images]\nlabels_ = [f.split('.')[0] for f in labels]\n\n\nuncommon_files = list(uncommon_files)\nuncommon_files\n\n# delete the uncommon files\nfor f in uncommon_files:\n    if f in images_base:\n        os.remove(os.path.join(images_dir, f + \".tif\"))\n    if f in labels_base:\n        os.remove(os.path.join(labels_dir, f + \".txt\"))\n\n\ndata = []\nfor img, lbl in zip(images_, labels_):\n    with open(os.path.join(labels_dir, lbl + \".txt\"), 'r') as f:\n        class_ids = [line.split()[0] for line in f]\n    with open(os.path.join(labels_dir, lbl + \".txt\"), 'r') as f:\n        str = f.read()\n        \n    if class_ids:\n        class_ids = Counter(class_ids)\n        data.append((img, str, class_ids['0'], class_ids['1'], class_ids['2']))\n\ndf = pd.DataFrame(data, columns=['image', 'label', 'Tile0', 'Tile1', 'Tile2'])\n\n\ndf\n\n\n\n\n\n\n\n\nimage\nlabel\nTile0\nTile1\nTile2\n\n\n\n\n0\nsolarpanels_native_1__x0_4225_y0_6594_dxdy_416\n0 0.020432692307692308 0.5264423076923077 0.04...\n15\n0\n0\n\n\n1\nsolarpanels_native_1__x0_2814_y0_9916_dxdy_416\n0 0.8473557692307693 0.795673076923077 0.14182...\n37\n0\n0\n\n\n2\nsolarpanels_native_3__x0_9519_y0_0_dxdy_416\n0 0.21875 0.4014423076923077 0.076923076923076...\n6\n0\n0\n\n\n3\nsolarpanels_native_1__x0_6959_y0_9541_dxdy_416\n0 0.6490384615384616 0.4050480769230769 0.0480...\n2\n0\n0\n\n\n4\nsolarpanels_native_1__x0_9486_y0_11065_dxdy_416\n0 0.9747596153846154 0.28365384615384615 0.050...\n6\n0\n0\n\n\n...\n...\n...\n...\n...\n...\n\n\n2537\nsolarpanels_native_3__x0_8755_y0_15212_dxdy_416\n0 0.43028846153846156 0.2980769230769231 0.057...\n3\n0\n0\n\n\n2538\nsolarpanels_native_3__x0_4980_y0_4737_dxdy_416\n0 0.7560096153846154 0.2848557692307693 0.0841...\n12\n0\n0\n\n\n2539\nsolarpanels_native_1__x0_1503_y0_8830_dxdy_416\n0 0.7584134615384616 0.25841346153846156 0.045...\n5\n0\n0\n\n\n2540\nsolarpanels_native_1__x0_8199_y0_0_dxdy_416\n0 0.04567307692307693 0.49759615384615385 0.09...\n9\n0\n0\n\n\n2541\nsolarpanels_native_3__x0_10164_y0_9908_dxdy_416\n0 0.7836538461538461 0.15625 0.096153846153846...\n6\n0\n0\n\n\n\n\n2542 rows × 5 columns\n\n\n\n\n# find the indices in df where all the tiles are present\nindices = df[(df['Tile0'] &gt; 0) & (df['Tile1'] &gt; 0) & (df['Tile2'] &gt; 0)].index\nindices\n\nIndex([561, 917, 1282, 1464, 1975, 2394, 2528], dtype='int64')\n\n\n\ndf.loc[indices]\n\n\n\n\n\n\n\n\nimage\nlabel\nTile0\nTile1\nTile2\n\n\n\n\n561\nsolarpanels_native_1__x0_8991_y0_12048_dxdy_416\n0 0.9639423076923077 0.11538461538461539 0.038...\n2\n1\n1\n\n\n917\nsolarpanels_native_1__x0_8146_y0_12213_dxdy_416\n2 0.020432692307692308 0.08774038461538462 0.0...\n6\n1\n1\n\n\n1282\nsolarpanels_native_1__x0_3374_y0_12821_dxdy_416\n2 0.375 0.6117788461538461 0.10096153846153846...\n4\n1\n1\n\n\n1464\nsolarpanels_native_3__x0_5913_y0_12334_dxdy_416\n2 0.07932692307692309 0.3858173076923077 0.100...\n4\n1\n1\n\n\n1975\nsolarpanels_native_1__x0_8450_y0_10250_dxdy_416\n2 0.05528846153846154 0.7103365384615385 0.100...\n6\n1\n1\n\n\n2394\nsolarpanels_native_1__x0_8271_y0_12537_dxdy_416\n2 0.030048076923076924 0.9435096153846154 0.06...\n4\n1\n1\n\n\n2528\nsolarpanels_native_3__x0_5545_y0_12093_dxdy_416\n0 0.020432692307692308 0.8317307692307693 0.04...\n4\n1\n1\n\n\n\n\n\n\n\n\nprint(\"Original Dataset:\\n\", df['Tile0'].sum(), df['Tile1'].sum(), df['Tile2'].sum())\n\nOriginal Dataset:\n 29267 130 228\n\n\n\nimage_path = \"./data/images/\" + uncommon_files[0] + \".tif\"\nimage_path1 = \"./data/images/\" + uncommon_files[0][:-3] + \".tif\"\n\n# plot the image\nimage = plt.imread(image_path)\nplt.imshow(image)\nplt.axis('off')\nplt.show()\n\nimage = plt.imread(image_path1)\nplt.imshow(image)\nplt.axis('off')\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlen(images_base), len(labels_base)\n\n(2553, 2542)\n\n\n\nlen(images), len(labels)\n\n(2542, 2542)\n\n\n\ntrain_image_dir = \"./data/train/images\"\ntrain_label_dir = \"./data/train/labels\"\ntest_image_dir = \"./data/test/images\"\ntest_label_dir = \"./data/test/labels\"\nval_image_dir = \"./data/val/images\"\nval_label_dir = \"./data/val/labels\"\n\nos.makedirs(train_image_dir, exist_ok=True)\nos.makedirs(train_label_dir, exist_ok=True)\nos.makedirs(test_image_dir, exist_ok=True)\nos.makedirs(test_label_dir, exist_ok=True)\nos.makedirs(val_image_dir, exist_ok=True)\nos.makedirs(val_label_dir, exist_ok=True)\n\ntrain_size = 0.8\ntest_size = 0.2\n\ntrain_images = random.sample(images_, int(train_size * len(images_)))\ntest_images = list(set(images_) - set(train_images))\n\nval_size = 0.1\nval_images = random.sample(train_images, int(val_size * len(train_images)))\ntrain_images = list(set(train_images) - set(val_images))\n\nlen(train_images), len(test_images), len(val_images)\n\n(1830, 509, 203)\n\n\n\nfor image in train_images:\n    shutil.copy(os.path.join(images_dir, image + \".tif\"), train_image_dir)\n    shutil.copy(os.path.join(labels_dir, image + \".txt\"), train_label_dir)\n    \nfor image in test_images:\n    shutil.copy(os.path.join(images_dir, image + \".tif\"), test_image_dir)\n    shutil.copy(os.path.join(labels_dir, image + \".txt\"), test_label_dir)\n\nfor image in val_images:\n    shutil.copy(os.path.join(images_dir, image + \".tif\"), val_image_dir)\n    shutil.copy(os.path.join(labels_dir, image + \".txt\"), val_label_dir)\n\n\nlen(os.listdir(train_image_dir)), len(os.listdir(train_label_dir)), len(os.listdir(test_image_dir)), len(os.listdir(test_label_dir)), len(os.listdir(val_image_dir)), len(os.listdir(val_label_dir)), len(images), len(labels)\n\n(1830, 1830, 509, 509, 203, 203, 2542, 2542)\n\n\n\ndef give_image(filename):\n    fileIm = f\"./data/images/{filename}.tif\"\n    fileLb = f\"./data/labels/{filename}.txt\"\n    \n    im = cv2.imread(fileIm)\n    \n    with open(fileLb, 'r') as f:\n        lines = f.readlines()\n        \n    for line in lines:\n        line = line.strip().split()\n        class_id, x_center, y_center, width, height = map(float, line)\n        x_center, y_center = int(x_center * im.shape[1]), int(y_center * im.shape[0])\n        width, height = int(width * im.shape[1]), int(height * im.shape[0])\n        \n        x1, y1 = x_center - width // 2, y_center - height // 2\n        x2, y2 = x_center + width // 2, y_center + height // 2\n\n        if class_id == 0:\n            cv2.rectangle(im, (x1, y1), (x2, y2), (255, 0, 0), 2)\n        elif class_id == 1:\n            cv2.rectangle(im, (x1, y1), (x2, y2), (0, 255, 0), 2)\n        elif class_id == 2:\n            cv2.rectangle(im, (x1, y1), (x2, y2), (0, 0, 255), 2)\n        \n    plt.figure(figsize=(6, 6))\n    plt.imshow(cv2.cvtColor(im, cv2.COLOR_BGR2RGB))\n    plt.axis('off')\n    plt.show()\n\n\ngive_image(images_[561])"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "AI for Social Good",
    "section": "",
    "text": "Dataset Preprocessing\n\n\n\nGuntas Singh Saran\n\n\nFeb 12, 2025\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\nTristan O’Malley\n\n\nFeb 9, 2025\n\n\n\n\n\n\n\n\nNo matching items"
  }
]